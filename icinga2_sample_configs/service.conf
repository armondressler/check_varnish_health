
apply Service "good client request rate " for (display_description => config in host.vars.varnish_instances) {
  import "generic-service"
  vars += config
  check_command = "varnish_health"
  vars.varnish_health_metric = "client_good_request_rate"
  vars.varnish_health_warning = vars.varnish_health_client_good_request_rate_warning
  vars.varnish_health_critical = vars.varnish_health_client_good_request_rate_critical
  if (vars.varnish_health_warning == "") { vars.varnish_health_warning = "" }
  if (vars.varnish_health_critical == "") { vars.varnish_health_critical = "" }
  assign where "varnish" in host.vars.services
  ignore where config.instance_disabled
}


apply Service "bad client request rate " for (display_description => config in host.vars.varnish_instances) {
  import "generic-service"
  vars += config
  check_command = "varnish_health"
  vars.varnish_health_metric = "client_bad_request_rate"
  vars.varnish_health_warning = vars.varnish_health_client_bad_request_rate_warning
  vars.varnish_health_critical = vars.varnish_health_client_bad_request_rate_critical
  if (vars.varnish_health_warning == "") { vars.varnish_health_warning = "" }
  if (vars.varnish_health_critical == "") { vars.varnish_health_critical = "" }
  assign where "varnish" in host.vars.services
  ignore where config.instance_disabled
}

apply Service "cache hitrate " for (display_description => config in host.vars.varnish_instances) {
  import "generic-service"
  vars += config
  check_command = "varnish_health"
  vars.varnish_health_metric = "cache_hitrate_pct"
  vars.varnish_health_warning = vars.varnish_health_cache_hitrate_pct_warning
  vars.varnish_health_critical = vars.varnish_health_cache_hitrate_pct_critical
  if (vars.varnish_health_warning == "") { vars.varnish_health_warning = "60:" }
  if (vars.varnish_health_critical == "") { vars.varnish_health_critical = "45:" }
  assign where "varnish" in host.vars.services
  ignore where config.instance_disabled
}

apply Service "cache hitforpass rate " for (display_description => config in host.vars.varnish_instances) {
  import "generic-service"
  vars += config
  check_command = "varnish_health"
  vars.varnish_health_metric = "cache_hitrate_pct"
  vars.varnish_health_warning = vars.varnish_health_cache_hitforpass_rate_warning
  vars.varnish_health_critical = vars.varnish_health_cache_hitforpass_rate_critical
  if (vars.varnish_health_warning == "") { vars.varnish_health_warning = ":50" }
  if (vars.varnish_health_critical == "") { vars.varnish_health_critical = "" }
  assign where "varnish" in host.vars.services
  ignore where config.instance_disabled
}

apply Service "cached objects expiry rate " for (display_description => config in host.vars.varnish_instances) {
  import "generic-service"
  vars += config
  check_command = "varnish_health"
  vars.varnish_health_metric = "cached_objects_expired_rate"
  vars.varnish_health_warning = vars.varnish_health_cached_objects_expired_rate_warning
  vars.varnish_health_critical = vars.varnish_health_cached_objects_expired_rate_critical
  if (vars.varnish_health_warning == "") { vars.varnish_health_warning = "" }
  if (vars.varnish_health_critical == "") { vars.varnish_health_critical = "" }
  assign where "varnish" in host.vars.services
  ignore where config.instance_disabled
}

apply Service "cached objects nuke rate " for (display_description => config in host.vars.varnish_instances) {
  import "generic-service"
  vars += config
  check_command = "varnish_health"
  vars.varnish_health_metric = "cached_objects_nuked_rate"
  vars.varnish_health_warning = vars.varnish_health_cached_objects_nuked_rate_warning
  vars.varnish_health_critical = vars.varnish_health_cached_objects_nuked_rate_critical
  if (vars.varnish_health_warning == "") { vars.varnish_health_warning = ":5" }
  if (vars.varnish_health_critical == "") { vars.varnish_health_critical = "" }
  assign where "varnish" in host.vars.services
  ignore where config.instance_disabled
}

apply Service "thread creation rate " for (display_description => config in host.vars.varnish_instances) {
  import "generic-service"
  vars += config
  check_command = "varnish_health"
  vars.varnish_health_metric = "threads_creation_rate"
  vars.varnish_health_warning = vars.varnish_health_threads_creation_rate_warning
  vars.varnish_health_critical = vars.varnish_health_threads_creation_rate_critical
  if (vars.varnish_health_warning == "") { vars.varnish_health_warning = "" }
  if (vars.varnish_health_critical == "") { vars.varnish_health_critical = "" }
  assign where "varnish" in host.vars.services
  ignore where config.instance_disabled
}

apply Service "thread creation error rate " for (display_description => config in host.vars.varnish_instances) {
  import "generic-service"
  vars += config
  check_command = "varnish_health"
  vars.varnish_health_metric = "threads_failed_rate"
  vars.varnish_health_warning = vars.varnish_health_threads_failed_rate_warning
  vars.varnish_health_critical = vars.varnish_health_threads_failed_rate_critical
  if (vars.varnish_health_warning == "") { vars.varnish_health_warning = ":1" }
  if (vars.varnish_health_critical == "") { vars.varnish_health_critical = "" }
  assign where "varnish" in host.vars.services
  ignore where config.instance_disabled
}

apply Service "thread creation error (saturation) rate " for (display_description => config in host.vars.varnish_instances) {
  import "generic-service"
  vars += config
  check_command = "varnish_health"
  vars.varnish_health_metric = "threads_failed_at_limit_rate"
  vars.varnish_health_warning = vars.varnish_health_threads_failed_at_limit_rate_warning
  vars.varnish_health_critical = vars.varnish_health_threads_failed_at_limit_rate_critical
  if (vars.varnish_health_warning == "") { vars.varnish_health_warning = ":1" }
  if (vars.varnish_health_critical == "") { vars.varnish_health_critical = "" }
  assign where "varnish" in host.vars.services
  ignore where config.instance_disabled
}

apply Service "session queue size " for (display_description => config in host.vars.varnish_instances) {
  import "generic-service"
  vars += config
  check_command = "varnish_health"
  vars.varnish_health_metric = "session_queue_rate"
  vars.varnish_health_warning = vars.varnish_health_session_queue_rate_warning
  vars.varnish_health_critical = vars.varnish_health_session_queue_rate_critical
  if (vars.varnish_health_warning == "") { vars.varnish_health_warning = "20:" }
  if (vars.varnish_health_critical == "") { vars.varnish_health_critical = "" }
  assign where "varnish" in host.vars.services
  ignore where config.instance_disabled
}

apply Service "backend request rate " for (display_description => config in host.vars.varnish_instances) {
  import "generic-service"
  vars += config
  check_command = "varnish_health"
  vars.varnish_health_metric = "backend_request_rate"
  vars.varnish_health_warning = vars.varnish_health_backend_request_rate_warning
  vars.varnish_health_critical = vars.varnish_health_backend_request_rate_critical
  if (vars.varnish_health_warning == "") { vars.varnish_health_warning = "" }
  if (vars.varnish_health_critical == "") { vars.varnish_health_critical = "" }
  assign where "varnish" in host.vars.services
  ignore where config.instance_disabled
}

apply Service "backend request error rate " for (display_description => config in host.vars.varnish_instances) {
  import "generic-service"
  vars += config
  check_command = "varnish_health"
  vars.varnish_health_metric = "backend_failed_request_rate"
  vars.varnish_health_warning = vars.varnish_health_backend_failed_request_rate_warning
  vars.varnish_health_critical = vars.varnish_health_backend_failed_request_rate_critical
  if (vars.varnish_health_warning == "") { vars.varnish_health_warning = "" }
  if (vars.varnish_health_critical == "") { vars.varnish_health_critical = "" }
  assign where "varnish" in host.vars.services
  ignore where config.instance_disabled
}

apply Service "backend connection rate " for (display_description => config in host.vars.varnish_instances) {
  import "generic-service"
  vars += config
  check_command = "varnish_health"
  vars.varnish_health_metric = "backend_connection_rate"
  vars.varnish_health_warning = vars.varnish_health_backend_connection_rate_warning
  vars.varnish_health_critical = vars.varnish_health_backend_connection_rate_critical
  if (vars.varnish_health_warning == "") { vars.varnish_health_warning = "" }
  if (vars.varnish_health_critical == "") { vars.varnish_health_critical = "" }
  assign where "varnish" in host.vars.services
  ignore where config.instance_disabled
}

apply Service "backend connection error (saturation) rate " for (display_description => config in host.vars.varnish_instances) {
  import "generic-service"
  vars += config
  check_command = "varnish_health"
  vars.varnish_health_metric = "backend_connection_saturation_rate"
  vars.varnish_health_warning = vars.varnish_health_backend_connection_saturation_rate_warning
  vars.varnish_health_critical = vars.varnish_health_backend_connection_saturation_rate_critical
  if (vars.varnish_health_warning == "") { vars.varnish_health_warning = "1:" }
  if (vars.varnish_health_critical == "") { vars.varnish_health_critical = "" }
  assign where "varnish" in host.vars.services
  ignore where config.instance_disabled
}

apply Service "backend request error (due to being marked as unhealthy) rate " for (display_description => config in host.vars.varnish_instances) {
  import "generic-service"
  vars += config
  check_command = "varnish_health"
  vars.varnish_health_metric = "backend_unattempted_connections_rate"
  vars.varnish_health_warning = vars.varnish_health_backend_unattempted_connections_rate_warning
  vars.varnish_health_critical = vars.varnish_health_backend_unattempted_connections_rate_critical
  if (vars.varnish_health_warning == "") { vars.varnish_health_warning = "1:" }
  if (vars.varnish_health_critical == "") { vars.varnish_health_critical = "" }
  assign where "varnish" in host.vars.services
  ignore where config.instance_disabled
}





